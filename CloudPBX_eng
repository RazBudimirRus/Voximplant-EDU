require(Modules.IVR); // Connecting the IVR module

//Setting global variables
let inboundCall;
let outboundCall;
let myNumber = "XXXXXXXXXXXXXXXX"; //In quotation marks you need to indicate your rented room
let userNumber;

//IVR is waiting for the input of a extention
const extState = new IVRState('extension', {
    type: 'inputfixed',
    inputLength: 3,
    prompt: {
      say: 'Hello! You've reached Vox Implant. Please enter the employee's extension or stay on the line to speak with the secretary',
      lang: VoiceList.Amazon.en_US_Joanna
    }
  }, (data) => {
    // The extention has been entered
    userNumber = data
    Logger.write (`Connecting with user ${userNumber}`)
      inboundCall.say(`Transferring your call to an extension ${userNumber}` , { "language":VoiceList.Amazon.en_US_Joanna });
      inboundCall.addEventListener(CallEvents.PlaybackFinished, handleFwdPlaybackFinished);
   }, (data) => {
    // Extension has not been entered
          inboundCall.say(`Transferring your call to a secretary` , { "language":VoiceList.Amazon.en_US_Joanna });
          inboundCall.addEventListener(CallEvents.PlaybackFinished, handleFwdToReceptionPlaybackFinished);  
  });


  //  Calling a user on the entered extension
function handleFwdPlaybackFinished(e) {
  inboundCall.removeEventListener(CallEvents.PlaybackFinished, handleFwdPlaybackFinished);
    outboundCall = VoxEngine.callUser(userNumber, inboundCall.callerid()); 
  outboundCall.addEventListener(CallEvents.Connected, (e) => {
    VoxEngine.sendMediaBetween(e.call, inboundCall);
  });
  outboundCall.addEventListener(CallEvents.Failed, VoxEngine.terminate);
  outboundCall.addEventListener(CallEvents.Disconnected, VoxEngine.terminate);
};

//Call to the secretary
function handleFwdToReceptionPlaybackFinished(e) {
  inboundCall.removeEventListener(CallEvents.PlaybackFinished, handleFwdToReceptionPlaybackFinished);
    outboundCall = VoxEngine.callUser("101", inboundCall.callerid()); // In this Example the Secretary extention is 101
  outboundCall.addEventListener(CallEvents.Connected, (e) => {
    VoxEngine.sendMediaBetween(e.call, inboundCall);
  });
  outboundCall.addEventListener(CallEvents.Failed, VoxEngine.terminate);
  outboundCall.addEventListener(CallEvents.Disconnected, VoxEngine.terminate);
};

  // CallAlerting event handler
VoxEngine.addEventListener(AppEvents.CallAlerting, (e) => {
  // If the incoming call came from PSTN
  if (e.headers["VI-Client-Type"] == "pstn"){
  inboundCall = e.call;
  inboundCall.addEventListener(CallEvents.Connected, handleCallConnected);
  inboundCall.addEventListener(CallEvents.Disconnected, handleCallDisconnected);
  inboundCall.answer(); // answer the call
  //Outbound calls from PBX users
  } else {
    if (e.destination.length > 3){      // Call to PSTN if the user dialed a number longer than 3 characters
     let call2 = VoxEngine.callPSTN(e.destination,myNumber); 
      VoxEngine.easyProcess(e.call, call2); 
    } else {
        let call3 = VoxEngine.callUser(e.destination,e.callerid);  //Local call if the user dialed a number shorter than 3 characters
          VoxEngine.easyProcess(e.call, call3) 
          };
         };
});


function handleCallConnected(e) {
  extState.enter(inboundCall);
}

function handleCallDisconnected(e) {
  VoxEngine.terminate();
}
